#!/usr/bin/env bash

set -e

# Verify NPM_TOKEN is set
if [ -z "$NPM_TOKEN" ]; then
    echo "Error: NPM_TOKEN environment variable is not set"
    echo "Please set NPM_TOKEN before publishing"
    exit 1
fi

npm config set '//registry.npmjs.org/:_authToken' "$NPM_TOKEN"

# Print the NPM username for validation
npm whoami

echo "Cleaning lib directory..."
rm -rf lib

echo "Building..."
npm run build

# Get package name and version from package.json
PACKAGE_NAME="$(node -p "require('./package.json').name")"
VERSION="$(node -p "require('./package.json').version")"

# Get latest version from npm
NPM_INFO="$(npm view "$PACKAGE_NAME" version --json 2>/dev/null || true)"

# Check if we got an E404 error or other errors
if echo "$NPM_INFO" | node -e "const input = require('fs').readFileSync(0, 'utf8'); try { const data = JSON.parse(input); if (data.error && data.error.code === 'E404') process.exit(0); else if (data.error) process.exit(1); else process.exit(2); } catch(e) { process.exit(2); }"; then
  # Package doesn't exist yet, no last version
  LAST_VERSION=""
elif [ $? -eq 1 ]; then
  # Report other errors
  echo "ERROR: npm returned unexpected data:"
  echo "$NPM_INFO"
  exit 1
else
  # Success - get the version
  LAST_VERSION=$(echo "$NPM_INFO" | node -e "const input = require('fs').readFileSync(0, 'utf8'); try { console.log(JSON.parse(input)); } catch(e) { console.log(input.replace(/\"/g, '')); }")
fi

echo "Package name: $PACKAGE_NAME"
echo "Version: $VERSION"
echo "Last version: $LAST_VERSION"

# Check if current version is pre-release (e.g. alpha / beta / rc)
CURRENT_IS_PRERELEASE=false
if [[ "$VERSION" =~ -([a-zA-Z]+) ]]; then
  CURRENT_IS_PRERELEASE=true
  CURRENT_TAG="${BASH_REMATCH[1]}"
fi

# Check if last version is a stable release
LAST_IS_STABLE_RELEASE=true
if [[ -z "$LAST_VERSION" || "$LAST_VERSION" =~ -([a-zA-Z]+) ]]; then
  LAST_IS_STABLE_RELEASE=false
fi

# Use a corresponding alpha/beta tag if there already is a stable release and we're publishing a prerelease.
if $CURRENT_IS_PRERELEASE && $LAST_IS_STABLE_RELEASE; then
  TAG="$CURRENT_TAG"
else
  TAG="latest"
fi

echo "Publish package with tag: $TAG"

# Publish with the appropriate tag
npm publish --tag "$TAG"